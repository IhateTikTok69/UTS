
ULTRASONIC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7d  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000744  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000571  00000000  00000000  00001ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000405  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067a  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002daf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8a:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_PWM>:
void HCSR04Trigger();

void lcd_command( unsigned char );
void setup_PWM()
{
	TCCR0 |= (1 << WGM00) | (1 << WGM01);    
  92:	83 b7       	in	r24, 0x33	; 51
  94:	88 64       	ori	r24, 0x48	; 72
  96:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);                   
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01) | (1 << CS00);      
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	83 bf       	out	0x33, r24	; 51
  a4:	08 95       	ret

000000a6 <HCSR04Init>:
}
void HCSR04Init()
{
	US_DDR|=(1<<US_TRIG_POS);
  a6:	84 b3       	in	r24, 0x14	; 20
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	84 bb       	out	0x14, r24	; 20
  ac:	08 95       	ret

000000ae <HCSR04Trigger>:
}

void HCSR04Trigger()
{  
	
	US_PORT|=(1<<US_TRIG_POS);	
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <HCSR04Trigger+0x8>
	
	_delay_us(15);				
	
	US_PORT&=~(1<<US_TRIG_POS);	
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	85 bb       	out	0x15, r24	; 21
  c0:	08 95       	ret

000000c2 <GetPulseWidth>:
uint16_t GetPulseWidth()
{

	uint32_t i,result;

	for(i=0;i<600000;i++)
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	dc 01       	movw	r26, r24
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
  ca:	99 99       	sbic	0x13, 1	; 19
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <GetPulseWidth+0x20>
uint16_t GetPulseWidth()
{

	uint32_t i,result;

	for(i=0;i<600000;i++)
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	a1 1d       	adc	r26, r1
  d2:	b1 1d       	adc	r27, r1
  d4:	80 3c       	cpi	r24, 0xC0	; 192
  d6:	27 e2       	ldi	r18, 0x27	; 39
  d8:	92 07       	cpc	r25, r18
  da:	29 e0       	ldi	r18, 0x09	; 9
  dc:	a2 07       	cpc	r26, r18
  de:	b1 05       	cpc	r27, r1
  e0:	a0 f3       	brcs	.-24     	; 0xca <GetPulseWidth+0x8>
		continue;	
		else
		break;	
	}

	if(i==600000)
  e2:	80 3c       	cpi	r24, 0xC0	; 192
  e4:	97 42       	sbci	r25, 0x27	; 39
  e6:	a9 40       	sbci	r26, 0x09	; 9
  e8:	b1 05       	cpc	r27, r1
  ea:	79 f1       	breq	.+94     	; 0x14a <GetPulseWidth+0x88>
	return US_ERROR;
	
	TCCR1A=0X00;
  ec:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			
  f2:	1d bc       	out	0x2d, r1	; 45
  f4:	1c bc       	out	0x2c, r1	; 44
	for(i=0;i<600000;i++)     
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	dc 01       	movw	r26, r24
  fc:	0a c0       	rjmp	.+20     	; 0x112 <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
  fe:	99 9b       	sbis	0x13, 1	; 19
 100:	0f c0       	rjmp	.+30     	; 0x120 <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;   
 102:	2c b5       	in	r18, 0x2c	; 44
 104:	3d b5       	in	r19, 0x2d	; 45
 106:	21 36       	cpi	r18, 0x61	; 97
 108:	3a 4e       	sbci	r19, 0xEA	; 234
 10a:	50 f4       	brcc	.+20     	; 0x120 <GetPulseWidth+0x5e>
	return US_ERROR;
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	
	TCNT1=0x00;			
	for(i=0;i<600000;i++)     
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	a1 1d       	adc	r26, r1
 110:	b1 1d       	adc	r27, r1
 112:	80 3c       	cpi	r24, 0xC0	; 192
 114:	27 e2       	ldi	r18, 0x27	; 39
 116:	92 07       	cpc	r25, r18
 118:	29 e0       	ldi	r18, 0x09	; 9
 11a:	a2 07       	cpc	r26, r18
 11c:	b1 05       	cpc	r27, r1
 11e:	78 f3       	brcs	.-34     	; 0xfe <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
 120:	80 3c       	cpi	r24, 0xC0	; 192
 122:	97 42       	sbci	r25, 0x27	; 39
 124:	a9 40       	sbci	r26, 0x09	; 9
 126:	b1 05       	cpc	r27, r1
 128:	99 f0       	breq	.+38     	; 0x150 <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	

	result=TCNT1;         
 12a:	8c b5       	in	r24, 0x2c	; 44
 12c:	9d b5       	in	r25, 0x2d	; 45
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0

	TCCR1B=0x00;
 132:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 134:	81 36       	cpi	r24, 0x61	; 97
 136:	2a ee       	ldi	r18, 0xEA	; 234
 138:	92 07       	cpc	r25, r18
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	58 f4       	brcc	.+22     	; 0x156 <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	
	else
	return (result>>1);
 140:	b6 95       	lsr	r27
 142:	a7 95       	ror	r26
 144:	97 95       	ror	r25
 146:	87 95       	ror	r24
 148:	08 95       	ret
		else
		break;	
	}

	if(i==600000)
	return US_ERROR;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
 14e:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	
 150:	8e ef       	ldi	r24, 0xFE	; 254
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	08 95       	ret
	result=TCNT1;         

	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	
 156:	8e ef       	ldi	r24, 0xFE	; 254
 158:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 15a:	08 95       	ret

0000015c <lcd_command>:
}

void lcd_command( unsigned char cmnd )
{

	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  
 15c:	92 b3       	in	r25, 0x12	; 18
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	28 2f       	mov	r18, r24
 162:	20 7f       	andi	r18, 0xF0	; 240
 164:	92 2b       	or	r25, r18
 166:	92 bb       	out	0x12, r25	; 18
	lcd_port &= ~ (1<<rs);
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9e 7f       	andi	r25, 0xFE	; 254
 16c:	92 bb       	out	0x12, r25	; 18
	lcd_port |= (1<<en);
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	92 60       	ori	r25, 0x02	; 2
 172:	92 bb       	out	0x12, r25	; 18
 174:	35 e0       	ldi	r19, 0x05	; 5
 176:	3a 95       	dec	r19
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_command+0x1a>
 17a:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 17c:	92 b3       	in	r25, 0x12	; 18
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	92 bb       	out	0x12, r25	; 18
 182:	ef e1       	ldi	r30, 0x1F	; 31
 184:	f3 e0       	ldi	r31, 0x03	; 3
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_command+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_command+0x30>
 18c:	00 00       	nop
	
	// wait 200 microseconds
	_delay_us(200);
	
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
 18e:	22 b3       	in	r18, 0x12	; 18
 190:	f0 e1       	ldi	r31, 0x10	; 16
 192:	8f 9f       	mul	r24, r31
 194:	c0 01       	movw	r24, r0
 196:	11 24       	eor	r1, r1
 198:	92 2f       	mov	r25, r18
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	89 2b       	or	r24, r25
 19e:	82 bb       	out	0x12, r24	; 18
	lcd_port |= (1<<en);
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	82 bb       	out	0x12, r24	; 18
 1a6:	35 e0       	ldi	r19, 0x05	; 5
 1a8:	3a 95       	dec	r19
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_command+0x4c>
 1ac:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<en);
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	9f e1       	ldi	r25, 0x1F	; 31
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_command+0x5c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_command+0x62>
 1be:	00 00       	nop
 1c0:	08 95       	ret

000001c2 <initialize>:



void initialize (void)
{
	lcd_data_dir = 0xFF;    
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	81 bb       	out	0x11, r24	; 17
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <initialize+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <initialize+0xe>
 1d0:	00 00       	nop
	_delay_ms(15);          
	lcd_command(0x02);       
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	lcd_command(0x28);       
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	lcd_command(0x0c);
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	lcd_command(0x06);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	lcd_command(0x01);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	9f e1       	ldi	r25, 0x1F	; 31
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <initialize+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <initialize+0x38>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <lcd_clear>:
	_delay_ms(2);
}

void lcd_clear()
{
	lcd_command (0x01);  
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_clear+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_clear+0x10>
 20e:	00 00       	nop
	_delay_ms(2);        
	lcd_command (0x80);   
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 216:	08 95       	ret

00000218 <lcd_print>:
}


void lcd_print (char *str)
{
 218:	fc 01       	movw	r30, r24
	int i;
	for(i=0; str[i]!=0; i++)
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	34 c0       	rjmp	.+104    	; 0x288 <lcd_print+0x70>
	{
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
 220:	82 b3       	in	r24, 0x12	; 18
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	90 7f       	andi	r25, 0xF0	; 240
 226:	98 2b       	or	r25, r24
 228:	92 bb       	out	0x12, r25	; 18
		lcd_port |= (1<<rs);
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	82 bb       	out	0x12, r24	; 18
		lcd_port|= (1<<en);
 230:	82 b3       	in	r24, 0x12	; 18
 232:	82 60       	ori	r24, 0x02	; 2
 234:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_print+0x20>
 23c:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	82 bb       	out	0x12, r24	; 18
 244:	8f e1       	ldi	r24, 0x1F	; 31
 246:	93 e0       	ldi	r25, 0x03	; 3
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_print+0x30>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_print+0x36>
 24e:	00 00       	nop
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
 250:	42 b3       	in	r20, 0x12	; 18
 252:	9c 91       	ld	r25, X
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	98 9f       	mul	r25, r24
 258:	90 01       	movw	r18, r0
 25a:	11 24       	eor	r1, r1
 25c:	94 2f       	mov	r25, r20
 25e:	9f 70       	andi	r25, 0x0F	; 15
 260:	29 2b       	or	r18, r25
 262:	22 bb       	out	0x12, r18	; 18
		lcd_port |= (1<<en);
 264:	92 b3       	in	r25, 0x12	; 18
 266:	92 60       	ori	r25, 0x02	; 2
 268:	92 bb       	out	0x12, r25	; 18
 26a:	95 e0       	ldi	r25, 0x05	; 5
 26c:	9a 95       	dec	r25
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_print+0x54>
 270:	00 00       	nop
		_delay_us(1);
		lcd_port &= ~ (1<<en);
 272:	92 b3       	in	r25, 0x12	; 18
 274:	9d 7f       	andi	r25, 0xFD	; 253
 276:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	9f e1       	ldi	r25, 0x1F	; 31
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_print+0x64>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_print+0x6a>
 282:	00 00       	nop


void lcd_print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	df 01       	movw	r26, r30
 28a:	a6 0f       	add	r26, r22
 28c:	b7 1f       	adc	r27, r23
 28e:	9c 91       	ld	r25, X
 290:	91 11       	cpse	r25, r1
 292:	c6 cf       	rjmp	.-116    	; 0x220 <lcd_print+0x8>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
 294:	08 95       	ret

00000296 <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){  
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <lcd_setCursor+0x6>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
	unsigned char adr[] = {0x80, 0xC0};  
 2a0:	90 e8       	ldi	r25, 0x80	; 128
 2a2:	99 83       	std	Y+1, r25	; 0x01
 2a4:	90 ec       	ldi	r25, 0xC0	; 192
 2a6:	9a 83       	std	Y+2, r25	; 0x02
	lcd_command(adr[y-1] + x-1);
 2a8:	e6 2f       	mov	r30, r22
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	2c 0f       	add	r18, r28
 2b4:	3d 1f       	adc	r19, r29
 2b6:	e2 0f       	add	r30, r18
 2b8:	f3 1f       	adc	r31, r19
 2ba:	90 81       	ld	r25, Z
 2bc:	89 0f       	add	r24, r25
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	8f e8       	ldi	r24, 0x8F	; 143
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_setCursor+0x32>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcd_setCursor+0x38>
 2ce:	00 00       	nop
	_delay_us(100);
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <main>:

int main()
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0x6>
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <main+0x8>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	DDRA |= (1 << PA0);
 2e6:	8a b3       	in	r24, 0x1a	; 26
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	8a bb       	out	0x1a, r24	; 26
	initialize();  
 2ec:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <initialize>
	setup_PWM();
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <setup_PWM>

	OCR0 = 128;
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	81 ee       	ldi	r24, 0xE1	; 225
 2fc:	94 e0       	ldi	r25, 0x04	; 4
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x24>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x2e>
 308:	00 00       	nop
		
		uint16_t r;
		
		_delay_ms(100);	

		HCSR04Init();
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <HCSR04Init>

		while(1)
		{
			HCSR04Trigger();
 30e:	0e 94 57 00 	call	0xae	; 0xae <HCSR04Trigger>
			r=GetPulseWidth();
 312:	0e 94 61 00 	call	0xc2	; 0xc2 <GetPulseWidth>
			if(r==US_ERROR)
 316:	8f 3f       	cpi	r24, 0xFF	; 255
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	92 07       	cpc	r25, r18
 31c:	49 f4       	brne	.+18     	; 0x330 <main+0x56>
			{
				lcd_setCursor(1, 1); 
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_setCursor>
				lcd_print("Error!");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_print>
 32e:	ef cf       	rjmp	.-34     	; 0x30e <main+0x34>
			}
			else 
			{
				distance=(r*0.034/2.0);
 330:	bc 01       	movw	r22, r24
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 22 02 	call	0x444	; 0x444 <__floatunsisf>
 33a:	26 e9       	ldi	r18, 0x96	; 150
 33c:	33 e4       	ldi	r19, 0x43	; 67
 33e:	4b e0       	ldi	r20, 0x0B	; 11
 340:	5d e3       	ldi	r21, 0x3D	; 61
 342:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	5f e3       	ldi	r21, 0x3F	; 63
 34e:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 352:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fixsfsi>
 356:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <distance+0x1>
 35a:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <distance>
				if (distance != previous_distance)
 35e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
 362:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__data_end+0x1>
 366:	26 17       	cp	r18, r22
 368:	37 07       	cpc	r19, r23
 36a:	11 f0       	breq	.+4      	; 0x370 <main+0x96>
				{
					lcd_clear();
 36c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
				}
				
				lcd_setCursor(1, 1);     
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_setCursor>
				lcd_print("Eye Dist. = ");
 378:	87 e6       	ldi	r24, 0x67	; 103
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_print>
				lcd_setCursor(12, 1);  
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_setCursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 388:	4a e0       	ldi	r20, 0x0A	; 10
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <distance>
 394:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <distance+0x1>
 398:	0e 94 1d 03 	call	0x63a	; 0x63a <__itoa_ncheck>
				itoa(distance, numberString, 10);    
				lcd_print(numberString);
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_print>
				lcd_setCursor(14, 1); 
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_setCursor>
				lcd_print(" cm");
 3ac:	84 e7       	ldi	r24, 0x74	; 116
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_print>
				previous_distance = distance;
 3b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <distance>
 3b8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <distance+0x1>
 3bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 3c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	96 e7       	ldi	r25, 0x76	; 118
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	81 50       	subi	r24, 0x01	; 1
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	20 40       	sbci	r18, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0xf0>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0xfa>
 3d4:	00 00       	nop
 3d6:	9b cf       	rjmp	.-202    	; 0x30e <main+0x34>

000003d8 <__fixsfsi>:
 3d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixunssfsi>
 3dc:	68 94       	set
 3de:	b1 11       	cpse	r27, r1
 3e0:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_szero>
 3e4:	08 95       	ret

000003e6 <__fixunssfsi>:
 3e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_splitA>
 3ea:	88 f0       	brcs	.+34     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3ec:	9f 57       	subi	r25, 0x7F	; 127
 3ee:	98 f0       	brcs	.+38     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f0:	b9 2f       	mov	r27, r25
 3f2:	99 27       	eor	r25, r25
 3f4:	b7 51       	subi	r27, 0x17	; 23
 3f6:	b0 f0       	brcs	.+44     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3f8:	e1 f0       	breq	.+56     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	1a f0       	brmi	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 404:	ba 95       	dec	r27
 406:	c9 f7       	brne	.-14     	; 0x3fa <__fixunssfsi+0x14>
 408:	14 c0       	rjmp	.+40     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 40a:	b1 30       	cpi	r27, 0x01	; 1
 40c:	91 f0       	breq	.+36     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 40e:	0e 94 81 02 	call	0x502	; 0x502 <__fp_zero>
 412:	b1 e0       	ldi	r27, 0x01	; 1
 414:	08 95       	ret
 416:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_zero>
 41a:	67 2f       	mov	r22, r23
 41c:	78 2f       	mov	r23, r24
 41e:	88 27       	eor	r24, r24
 420:	b8 5f       	subi	r27, 0xF8	; 248
 422:	39 f0       	breq	.+14     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 424:	b9 3f       	cpi	r27, 0xF9	; 249
 426:	cc f3       	brlt	.-14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 428:	86 95       	lsr	r24
 42a:	77 95       	ror	r23
 42c:	67 95       	ror	r22
 42e:	b3 95       	inc	r27
 430:	d9 f7       	brne	.-10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 432:	3e f4       	brtc	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	08 95       	ret

00000444 <__floatunsisf>:
 444:	e8 94       	clt
 446:	09 c0       	rjmp	.+18     	; 0x45a <__floatsisf+0x12>

00000448 <__floatsisf>:
 448:	97 fb       	bst	r25, 7
 44a:	3e f4       	brtc	.+14     	; 0x45a <__floatsisf+0x12>
 44c:	90 95       	com	r25
 44e:	80 95       	com	r24
 450:	70 95       	com	r23
 452:	61 95       	neg	r22
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	99 23       	and	r25, r25
 45c:	a9 f0       	breq	.+42     	; 0x488 <__floatsisf+0x40>
 45e:	f9 2f       	mov	r31, r25
 460:	96 e9       	ldi	r25, 0x96	; 150
 462:	bb 27       	eor	r27, r27
 464:	93 95       	inc	r25
 466:	f6 95       	lsr	r31
 468:	87 95       	ror	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f1 11       	cpse	r31, r1
 472:	f8 cf       	rjmp	.-16     	; 0x464 <__floatsisf+0x1c>
 474:	fa f4       	brpl	.+62     	; 0x4b4 <__floatsisf+0x6c>
 476:	bb 0f       	add	r27, r27
 478:	11 f4       	brne	.+4      	; 0x47e <__floatsisf+0x36>
 47a:	60 ff       	sbrs	r22, 0
 47c:	1b c0       	rjmp	.+54     	; 0x4b4 <__floatsisf+0x6c>
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	16 c0       	rjmp	.+44     	; 0x4b4 <__floatsisf+0x6c>
 488:	88 23       	and	r24, r24
 48a:	11 f0       	breq	.+4      	; 0x490 <__floatsisf+0x48>
 48c:	96 e9       	ldi	r25, 0x96	; 150
 48e:	11 c0       	rjmp	.+34     	; 0x4b2 <__floatsisf+0x6a>
 490:	77 23       	and	r23, r23
 492:	21 f0       	breq	.+8      	; 0x49c <__floatsisf+0x54>
 494:	9e e8       	ldi	r25, 0x8E	; 142
 496:	87 2f       	mov	r24, r23
 498:	76 2f       	mov	r23, r22
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__floatsisf+0x5e>
 49c:	66 23       	and	r22, r22
 49e:	71 f0       	breq	.+28     	; 0x4bc <__floatsisf+0x74>
 4a0:	96 e8       	ldi	r25, 0x86	; 134
 4a2:	86 2f       	mov	r24, r22
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	2a f0       	brmi	.+10     	; 0x4b4 <__floatsisf+0x6c>
 4aa:	9a 95       	dec	r25
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	da f7       	brpl	.-10     	; 0x4aa <__floatsisf+0x62>
 4b4:	88 0f       	add	r24, r24
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret

000004be <__fp_split3>:
 4be:	57 fd       	sbrc	r21, 7
 4c0:	90 58       	subi	r25, 0x80	; 128
 4c2:	44 0f       	add	r20, r20
 4c4:	55 1f       	adc	r21, r21
 4c6:	59 f0       	breq	.+22     	; 0x4de <__fp_splitA+0x10>
 4c8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <__fp_splitA+0x1a>
 4cc:	47 95       	ror	r20

000004ce <__fp_splitA>:
 4ce:	88 0f       	add	r24, r24
 4d0:	97 fb       	bst	r25, 7
 4d2:	99 1f       	adc	r25, r25
 4d4:	61 f0       	breq	.+24     	; 0x4ee <__fp_splitA+0x20>
 4d6:	9f 3f       	cpi	r25, 0xFF	; 255
 4d8:	79 f0       	breq	.+30     	; 0x4f8 <__fp_splitA+0x2a>
 4da:	87 95       	ror	r24
 4dc:	08 95       	ret
 4de:	12 16       	cp	r1, r18
 4e0:	13 06       	cpc	r1, r19
 4e2:	14 06       	cpc	r1, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <__fp_split3+0xe>
 4e8:	46 95       	lsr	r20
 4ea:	f1 df       	rcall	.-30     	; 0x4ce <__fp_splitA>
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <__fp_splitA+0x30>
 4ee:	16 16       	cp	r1, r22
 4f0:	17 06       	cpc	r1, r23
 4f2:	18 06       	cpc	r1, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	f1 cf       	rjmp	.-30     	; 0x4da <__fp_splitA+0xc>
 4f8:	86 95       	lsr	r24
 4fa:	71 05       	cpc	r23, r1
 4fc:	61 05       	cpc	r22, r1
 4fe:	08 94       	sec
 500:	08 95       	ret

00000502 <__fp_zero>:
 502:	e8 94       	clt

00000504 <__fp_szero>:
 504:	bb 27       	eor	r27, r27
 506:	66 27       	eor	r22, r22
 508:	77 27       	eor	r23, r23
 50a:	cb 01       	movw	r24, r22
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__mulsf3>:
 510:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3x>
 514:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 518:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 51c:	38 f0       	brcs	.+14     	; 0x52c <__mulsf3+0x1c>
 51e:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 522:	20 f0       	brcs	.+8      	; 0x52c <__mulsf3+0x1c>
 524:	95 23       	and	r25, r21
 526:	11 f0       	breq	.+4      	; 0x52c <__mulsf3+0x1c>
 528:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 52c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>
 530:	11 24       	eor	r1, r1
 532:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_szero>

00000536 <__mulsf3x>:
 536:	0e 94 5f 02 	call	0x4be	; 0x4be <__fp_split3>
 53a:	70 f3       	brcs	.-36     	; 0x518 <__mulsf3+0x8>

0000053c <__mulsf3_pse>:
 53c:	95 9f       	mul	r25, r21
 53e:	c1 f3       	breq	.-16     	; 0x530 <__mulsf3+0x20>
 540:	95 0f       	add	r25, r21
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	55 1f       	adc	r21, r21
 546:	62 9f       	mul	r22, r18
 548:	f0 01       	movw	r30, r0
 54a:	72 9f       	mul	r23, r18
 54c:	bb 27       	eor	r27, r27
 54e:	f0 0d       	add	r31, r0
 550:	b1 1d       	adc	r27, r1
 552:	63 9f       	mul	r22, r19
 554:	aa 27       	eor	r26, r26
 556:	f0 0d       	add	r31, r0
 558:	b1 1d       	adc	r27, r1
 55a:	aa 1f       	adc	r26, r26
 55c:	64 9f       	mul	r22, r20
 55e:	66 27       	eor	r22, r22
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	66 1f       	adc	r22, r22
 566:	82 9f       	mul	r24, r18
 568:	22 27       	eor	r18, r18
 56a:	b0 0d       	add	r27, r0
 56c:	a1 1d       	adc	r26, r1
 56e:	62 1f       	adc	r22, r18
 570:	73 9f       	mul	r23, r19
 572:	b0 0d       	add	r27, r0
 574:	a1 1d       	adc	r26, r1
 576:	62 1f       	adc	r22, r18
 578:	83 9f       	mul	r24, r19
 57a:	a0 0d       	add	r26, r0
 57c:	61 1d       	adc	r22, r1
 57e:	22 1f       	adc	r18, r18
 580:	74 9f       	mul	r23, r20
 582:	33 27       	eor	r19, r19
 584:	a0 0d       	add	r26, r0
 586:	61 1d       	adc	r22, r1
 588:	23 1f       	adc	r18, r19
 58a:	84 9f       	mul	r24, r20
 58c:	60 0d       	add	r22, r0
 58e:	21 1d       	adc	r18, r1
 590:	82 2f       	mov	r24, r18
 592:	76 2f       	mov	r23, r22
 594:	6a 2f       	mov	r22, r26
 596:	11 24       	eor	r1, r1
 598:	9f 57       	subi	r25, 0x7F	; 127
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	9a f0       	brmi	.+38     	; 0x5c4 <__mulsf3_pse+0x88>
 59e:	f1 f0       	breq	.+60     	; 0x5dc <__mulsf3_pse+0xa0>
 5a0:	88 23       	and	r24, r24
 5a2:	4a f0       	brmi	.+18     	; 0x5b6 <__mulsf3_pse+0x7a>
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	bb 1f       	adc	r27, r27
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	91 50       	subi	r25, 0x01	; 1
 5b2:	50 40       	sbci	r21, 0x00	; 0
 5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__mulsf3_pse+0x64>
 5b6:	9e 3f       	cpi	r25, 0xFE	; 254
 5b8:	51 05       	cpc	r21, r1
 5ba:	80 f0       	brcs	.+32     	; 0x5dc <__mulsf3_pse+0xa0>
 5bc:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 5c0:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_szero>
 5c4:	5f 3f       	cpi	r21, 0xFF	; 255
 5c6:	e4 f3       	brlt	.-8      	; 0x5c0 <__mulsf3_pse+0x84>
 5c8:	98 3e       	cpi	r25, 0xE8	; 232
 5ca:	d4 f3       	brlt	.-12     	; 0x5c0 <__mulsf3_pse+0x84>
 5cc:	86 95       	lsr	r24
 5ce:	77 95       	ror	r23
 5d0:	67 95       	ror	r22
 5d2:	b7 95       	ror	r27
 5d4:	f7 95       	ror	r31
 5d6:	e7 95       	ror	r30
 5d8:	9f 5f       	subi	r25, 0xFF	; 255
 5da:	c1 f7       	brne	.-16     	; 0x5cc <__mulsf3_pse+0x90>
 5dc:	fe 2b       	or	r31, r30
 5de:	88 0f       	add	r24, r24
 5e0:	91 1d       	adc	r25, r1
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret

000005ea <__fp_inf>:
 5ea:	97 f9       	bld	r25, 7
 5ec:	9f 67       	ori	r25, 0x7F	; 127
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <__fp_nan>:
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	08 95       	ret

000005fc <__fp_pscA>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	09 06       	cpc	r0, r25
 608:	08 95       	ret

0000060a <__fp_pscB>:
 60a:	00 24       	eor	r0, r0
 60c:	0a 94       	dec	r0
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	05 06       	cpc	r0, r21
 616:	08 95       	ret

00000618 <__fp_round>:
 618:	09 2e       	mov	r0, r25
 61a:	03 94       	inc	r0
 61c:	00 0c       	add	r0, r0
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0xc>
 620:	88 23       	and	r24, r24
 622:	52 f0       	brmi	.+20     	; 0x638 <__fp_round+0x20>
 624:	bb 0f       	add	r27, r27
 626:	40 f4       	brcc	.+16     	; 0x638 <__fp_round+0x20>
 628:	bf 2b       	or	r27, r31
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0x18>
 62c:	60 ff       	sbrs	r22, 0
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__fp_round+0x20>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__itoa_ncheck>:
 63a:	bb 27       	eor	r27, r27
 63c:	4a 30       	cpi	r20, 0x0A	; 10
 63e:	31 f4       	brne	.+12     	; 0x64c <__itoa_ncheck+0x12>
 640:	99 23       	and	r25, r25
 642:	22 f4       	brpl	.+8      	; 0x64c <__itoa_ncheck+0x12>
 644:	bd e2       	ldi	r27, 0x2D	; 45
 646:	90 95       	com	r25
 648:	81 95       	neg	r24
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	0c 94 29 03 	jmp	0x652	; 0x652 <__utoa_common>

00000650 <__utoa_ncheck>:
 650:	bb 27       	eor	r27, r27

00000652 <__utoa_common>:
 652:	fb 01       	movw	r30, r22
 654:	55 27       	eor	r21, r21
 656:	aa 27       	eor	r26, r26
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	aa 1f       	adc	r26, r26
 65e:	a4 17       	cp	r26, r20
 660:	10 f0       	brcs	.+4      	; 0x666 <__utoa_common+0x14>
 662:	a4 1b       	sub	r26, r20
 664:	83 95       	inc	r24
 666:	50 51       	subi	r21, 0x10	; 16
 668:	b9 f7       	brne	.-18     	; 0x658 <__utoa_common+0x6>
 66a:	a0 5d       	subi	r26, 0xD0	; 208
 66c:	aa 33       	cpi	r26, 0x3A	; 58
 66e:	08 f0       	brcs	.+2      	; 0x672 <__utoa_common+0x20>
 670:	a9 5d       	subi	r26, 0xD9	; 217
 672:	a1 93       	st	Z+, r26
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	79 f7       	brne	.-34     	; 0x656 <__utoa_common+0x4>
 678:	b1 11       	cpse	r27, r1
 67a:	b1 93       	st	Z+, r27
 67c:	11 92       	st	Z+, r1
 67e:	cb 01       	movw	r24, r22
 680:	0c 94 42 03 	jmp	0x684	; 0x684 <strrev>

00000684 <strrev>:
 684:	dc 01       	movw	r26, r24
 686:	fc 01       	movw	r30, r24
 688:	67 2f       	mov	r22, r23
 68a:	71 91       	ld	r23, Z+
 68c:	77 23       	and	r23, r23
 68e:	e1 f7       	brne	.-8      	; 0x688 <strrev+0x4>
 690:	32 97       	sbiw	r30, 0x02	; 2
 692:	04 c0       	rjmp	.+8      	; 0x69c <strrev+0x18>
 694:	7c 91       	ld	r23, X
 696:	6d 93       	st	X+, r22
 698:	70 83       	st	Z, r23
 69a:	62 91       	ld	r22, -Z
 69c:	ae 17       	cp	r26, r30
 69e:	bf 07       	cpc	r27, r31
 6a0:	c8 f3       	brcs	.-14     	; 0x694 <strrev+0x10>
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
